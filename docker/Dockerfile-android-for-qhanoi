# Dockerfile to setup Android and Qt for compiling qhanoi
#
# Copyright (C) 2019 Michael G. Hansen
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

FROM ubuntu:18.04

# It is recommended to provide a caching proxy server during
# the build in case one wants to run it several times, because
# large downloads are performed.
# Set http_proxy=http://proxy_ip:proxyport using this build parameter:
# If you are running squid on your local host: http_proxy=http://172.17.0.1:3128
# --build-arg http_proxy=...
ARG http_proxy
ENV http_proxy=${http_proxy}

# inspired by:
# - https://github.com/winie/qt-android-docker
# - https://github.com/Subsurface-divelog/subsurface

ENV DEBIAN_FRONTEND=noninteractive \
    JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \
    ANDROID_NDK_ROOT=/android/android-ndk-r18b \
    ANDROID_SDK_ROOT=/android/android-sdk-linux \
    QT5_ANDROID=/android/Qt/5.12.3/

RUN echo "Proxy setting: \"${http_proxy}\"" \
 && apt-get update \
 && apt-get install -y eatmydata auto-apt-proxy \
 && eatmydata apt-get clean

# Cache directory for anything that needs to be downloaded
RUN mkdir /install
 
# install general tools
RUN eatmydata apt-get install -y wget make cmake unzip

# dependencies for Android
RUN eatmydata apt-get install -y openjdk-8-jdk

# download Android NDK and SDK
RUN wget --show-progress http://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip -O /install/android-ndk-linux.zip
RUN wget http://dl.google.com/android/repository/sdk-tools-linux-3859397.zip -O /install/android-sdk-linux.zip

# unzip Android NDK and SDK
RUN mkdir -p ${ANDROID_NDK_ROOT} \
 && mkdir -p ${ANDROID_SDK_ROOT} \
 && eatmydata unzip -q /install/android-ndk-linux.zip -d ${ANDROID_NDK_ROOT}/../ \
 && eatmydata unzip -q /install/android-sdk-linux.zip -d ${ANDROID_SDK_ROOT}

# set up Android SDK
RUN cd ${ANDROID_SDK_ROOT}/tools/bin \
 && yes | ./sdkmanager --licenses \
 && ./sdkmanager "platform-tools" "build-tools;25.0.3" "platforms;android-16" \
 && yes | ./sdkmanager --licenses

RUN wget http://download.qt.io/official_releases/qt/5.12/5.12.3/qt-opensource-linux-x64-5.12.3.run -O /install/qt-installer.run

ADD docker/qt-install-script.qs /install/

# Set the proxy to an invalid value to prevent the installer from contacting any Qt website
# which leads to additional questions about logins
# - seems to actually only be problematic if we have used a proxy before. But restrict
#   internet access anyway.
RUN chmod +x /install/qt-installer.run \
 && http_proxy=none.invalid eatmydata /install/qt-installer.run --platform minimal --script /install/qt-install-script.qs -v \
 && echo "Installer finished, waiting for docker to fsync..."

# Install gradle via gradle-wrapper. Since the current user is root, gradle will use /root/.gradle/ as its directory.
# We are running gradle on a stripped-down build directory of qhanoi.
# https://stackoverflow.com/questions/47102615/how-to-make-gradle-download-dependencies-without-actually-building-things
RUN mkdir -p /install/gradle-dummy
ADD ./docker/gradle-dummy /install/gradle-dummy
RUN cd /install/gradle-dummy && eatmydata /android/Qt/5.12.3/android_armv7/src/3rdparty/gradle/gradlew --no-daemon dependencies

# Clear installer directory
# Note that proper docker practice is to delete these files right after they are executed,
# but we keep them all around until the end in case something breaks in-between and we
# want to check it manually.
RUN rm -rf /install/
