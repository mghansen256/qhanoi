# Build qhanoi for Android inside docker
#
# Copyright (C) 2019 Michael G. Hansen
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# note: start docker from qhanoi's main directory like this: sudo docker build -f docker/Dockerfile-android .
# TODO:
# - install gradle into the image. Currently, gradle is downloaded at build time and installed into the build directory.

ARG from=android-for-qhanoi
FROM ${from}

# TODO: expect these in docker base image (specified under from-directive?)
ENV QT5_ANDROID=/android/Qt/5.12.3/ \
    ANDROID_ABI=armeabi-v7a \
    QT_ARCH=armv7

# re-using variables seems only to work properly if they are set in different ENV commands
ENV QT5_ANDROID_CMAKE=${QT5_ANDROID}/android_${QT_ARCH}/lib/cmake

# Check that all environment variables point to existing directories
# TODO: implement a script for that with colored warnings (use "tput" to color the warnings)
# Note that [ ! -d requires its filepath to be in quotes, otherwise it does not report missing directories!
RUN if [ ! -d "${ANDROID_NDK_ROOT}" ] ; then echo "Android NDK not found in ANDROID_NDK_ROOT = " ${ANDROID_NDK_ROOT} ; exit 1 ; fi ; \
    if [ ! -d "${ANDROID_SDK_ROOT}" ] ; then echo "Android SDK not found in ANDROID_SDK_ROOT = " ${ANDROID_SDK_ROOT} ; exit 1 ; fi ; \
    if [ ! -d "${JAVA_HOME}" ] ; then echo "Java not found in JAVA_HOME = " ${JAVA_HOME} ; exit 1 ; fi ; \
    if [ ! -d "${QT5_ANDROID}" ] ; then echo "Qt5 Android not found in QT5_ANDROID = " ${QT5_ANDROID} ; exit 1 ; fi ; \
    if [ ! -e "${QT5_ANDROID_CMAKE}" ] ; then echo "Qt5 Android cmake file not found in QT5_ANDROID_CMAKE = " ${QT5_ANDROID_CMAKE} ; exit 1 ; fi

# Only install these packages if not yet installed. This saves the "apt-get update".
RUN if \
      [ "`dpkg -s eatmydata | grep "Status: install" | wc -l`" -ne "1" ] \
      || \
      [ "`dpkg -s auto-apt-proxy | grep "Status: install" | wc -l`" -ne "1" ] ; \
    then \
      apt-get update && apt-get install -y eatmydata auto-apt-proxy ; \
    fi

RUN mkdir -p /src/build && mkdir -p /build
ADD . src/qhanoi

# Note: We normally expect to be able to simply specify the Qt5 path in CMAKE_PREFIX_PATH, but then some
# modules are not found (according to online search, maybe a bug in Ubuntu 18.04). Therefore, we specify
# the directories for each module.
RUN cd /build && \
    eatmydata cmake -DCMAKE_SYSTEM_NAME="Android" \
        -DANDROID_ABI=$ANDROID_ABI \
        -DQT_ANDROID_SDK_ROOT="$ANDROID_SDK_ROOT" \
        -DQT_ANDROID_NDK_ROOT="$ANDROID_NDK_ROOT" \
        -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT"/build/cmake/android.toolchain.cmake \
        -DANDROID_STL="c++_shared" \
        -DCMAKE_PREFIX_PATH:UNINITIALIZED="$QT5_ANDROID_CMAKE" \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_MAKE_PROGRAM="make" \
        -DQt5Gui_DIR=${QT5_ANDROID}/android_armv7/lib/cmake/Qt5Gui -DQt5Svg_DIR=${QT5_ANDROID}/android_armv7/lib/cmake/Qt5Svg \
        -DQt5Core_DIR=${QT5_ANDROID}/android_armv7/lib/cmake/Qt5Core -DQt5Xml_DIR=${QT5_ANDROID}/android_armv7/lib/cmake/Qt5Xml \
        -DQt5Widgets_DIR=${QT5_ANDROID}/android_armv7/lib/cmake/Qt5Widgets/ -DCMAKE_PREFIX_PATH=QT5_ANDROID/android_armv7/lib \
        /src/qhanoi

# This runs make from the Android NDK.
# TODO: add -j x to use more CPUs.
RUN cd /build && eatmydata cmake --build . -- VERBOSE=1

# APK to be found in: /build/src//build/outputs/apk/debug/src-debug.apk

# TODO: the resulting APK file is signed, but by whom?
